(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))l(e);new MutationObserver(e=>{for(const n of e)if(n.type==="childList")for(const c of n.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&l(c)}).observe(document,{childList:!0,subtree:!0});function o(e){const n={};return e.integrity&&(n.integrity=e.integrity),e.referrerPolicy&&(n.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?n.credentials="include":e.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function l(e){if(e.ep)return;e.ep=!0;const n=o(e);fetch(e.href,n)}})();const d="https://openai-worker.kathleen-elizabeth-west.workers.dev/madlib",u="https://openai-worker.kathleen-elizabeth-west.workers.dev/image",i=document.getElementById("story-output"),s=document.getElementById("image-output"),a=document.getElementById("image-section");document.getElementById("generate-story-button").addEventListener("click",m);document.getElementById("generate-image-button").addEventListener("click",g);async function m(){try{i.innerText="Generating story...",s.innerHTML="",a.style.display="none";const t={noun:document.getElementById("noun").value,verb:document.getElementById("verb").value,adjective:document.getElementById("adjective").value};if(!t.noun||!t.verb||!t.adjective){alert("Please fill in all fields: noun, verb, and adjective.");return}const r=await fetch(d,{method:"POST",headers:{"Content-Type":"text/plain"},body:JSON.stringify(t)});if(!r.ok)throw new Error(`Server error: ${r.status}`);const o=await r.text();i.innerText=o,i.innerText.trim()!==""&&(a.style.display="block")}catch(t){console.error(t),a.style.display="none",i.innerText="Something went wrong while generating the story."}}async function g(){try{if(a.style.display="block",s.innerText="Generating picture...",i.innerText.trim()===""){alert("Please generate a story first.");return}const t=i.innerText,r=await fetch(u,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:t})});if(!r.ok)throw new Error(`Server error: ${r.status}`);const{b64_json:o}=await r.json();if(!o)throw new Error("No image data received from the server.");s.innerHTML=`<img src="data:image/png;base64,${o}">`}catch(t){console.error(t),s.innerText="Something went wrong while generating the image."}}
